name: Build Project
description: Configure, build and install project

inputs:
  coverage:
    default: 'false'
  options:
    default: ''
  prefix:
    default: ${{ github.workspace }}/opt
  pkgconfig-prefix:
    default: ''
  build-path:
    default: 'build'
  source-path:
    default: '.'
  build-type:
    default: 'plain'
  build:
    default: ''
  install:
    default: 'false'
  dist:
    default: 'false'
  dist-subprojects:
    default: 'true'
  dist-tests:
    default: 'false'
  install-deb:
    default: 'false'

outputs:
  dist-path:
    value: ${{ steps.dist.outputs.dist-path }}

runs:
  using: composite
  steps:
    - name: Configure project
      working-directory: ${{ inputs.source-path }}
      run: |
        options=$(echo "${{ inputs.options }}" | \
          sed -E 's/[,]*([^,]+)[,]*/-D\1 /g')
        [ -n "${{ inputs.pkgconfig-prefix }}" ] && \
          pkgconfig_dir="lib/$($CC -print-multiarch)/pkgconfig" && \
          options="$options --pkg-config-path=${{ inputs.pkgconfig-prefix }}/$pkgconfig_dir"
        eval meson setup \
          --reconfigure \
          --prefix="${{ inputs.prefix }}" \
          --buildtype="${{ inputs.build-type }}" \
          -Db_coverage="${{ inputs.coverage }}" \
          "$options" \
          "${{ inputs.build-path }}"
      shell: bash

    - name: Build project
      working-directory: ${{ inputs.source-path }}
      if: >-
        ${{ (inputs.build == '' && inputs.dist == 'false') ||
          inputs.build == 'true' || inputs.install == 'true' }}
      run: meson compile -C "${{ inputs.build-path }}"
      shell: bash

    - name: Install project
      working-directory: ${{ inputs.source-path }}
      if: ${{ inputs.install == 'true' }}
      run: meson install -C "${{ inputs.build-path }}"
      shell: bash

    - name: Generate distribution artifacts
      id: dist
      working-directory: ${{ inputs.source-path }}
      if: ${{ inputs.dist == 'true' || inputs.install-deb == 'true' }}
      run: |
        [ "${{ inputs.dist-subprojects }}" == "true" ] && \
          args+=" --include-subprojects"
        [ "${{ inputs.dist-tests }}" == "false" ] && \
          args+=" --no-tests"
        eval meson dist "$args" --allow-dirty -C "${{ inputs.build-path }}"
        echo "dist-path=${{ inputs.build-path }}/meson-dist" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Install generated debs
      working-directory: ${{ inputs.source-path }}
      if: ${{ inputs.install-deb == 'true' }}
      run: sudo dpkg -i "${{ steps.dist.outputs.dist-path }}"/*.deb
      shell: bash
