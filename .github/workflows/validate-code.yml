name: Validate Source Code

on:
  workflow_call:
    inputs:
      actions-repo:
        type: string
        default: 'nubificus/vaccel'
      actions-rev:
        type: string
        default: 'main'
      runner:
        type: string
        default: '["gcc", "dind", "2204"]'
      runner-archs:
        type: string
        default: '["amd64"]'
      runner-arch-map:
        type: string
        default: '[{"amd64":"x86_64", "arm64":"aarch64", "arm":"armv7l"}]'
      options:
        type: string
        default: 'auto_features=enabled'
      build:
        type: boolean
        default: false
      skip-download:
        type: boolean
        default: false
      skip-cppcheck:
        type: boolean
        default: false
    secrets:
      GIT_CLONE_PAT:
        required: false
      AWS_ACCESS_KEY:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

env:
  ACTIONS_REV: ${{ (github.repository != inputs.actions-repo) && inputs.actions-rev || '' }}

jobs:
  linter-cppcheck:
    name: Lint C/C++ (cppcheck)
    if: ${{ inputs.skip-cppcheck == false }}
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.arch) }}
    strategy:
      matrix:
        arch: ["${{ fromJSON(inputs.runner-archs) }}"]
        build-type: [release]
      fail-fast: false
    env:
      ARCH: ${{ fromJson(inputs.runner-arch-map)[0][matrix.arch] }}
      DOWNLOAD_PATH: ${{github.workspace}}/artifacts/downloads/${{fromJson(inputs.runner-arch-map)[0][matrix.arch]}}/${{matrix.build-type}}
      CC: gcc-12
      CXX: g++-12
    steps:
      - name: Checkout .github directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          repository: ${{ inputs.actions-repo }}
          ref: ${{ env.ACTIONS_REV }}

      - name: Initialize workspace
        id: initialize-workspace
        uses: ./.github/actions/initialize-workspace
        with:
          fetch-depth: 0
          remote-actions-repo: ${{ inputs.actions-repo }}
          token: ${{ secrets.GIT_CLONE_PAT || github.token }}

      - name: Download artifacts from s3
        id: download-artifacts
        if: >-
          ${{ inputs.actions-repo != github.repository &&
          inputs.skip-download == false }}
        uses: ./.github/actions/download-from-s3
        with:
          branch: ${{ steps.initialize-workspace.outputs.remote-branch }}
          build-type: ${{ matrix.build-type }}
          arch: ${{ env.ARCH }}
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          local-path: ${{ env.DOWNLOAD_PATH }}
          install: 'true'

      - name: Configure project
        uses: ./.github/actions/build
        with:
          build-path: build_${{ matrix.build-type }}
          build-type: ${{ matrix.build-type }}
          build: 'false'
          options: ${{ inputs.options }}

      - name: Run cppcheck
        run: |
          cppcheck \
            --project=build_${{ matrix.build-type }}/compile_commands.json \
            -itest -ithird-party -isubprojects \
            --suppressions-list=.github/linters/cppcheck.txt \
            --error-exitcode=2

      - name: Clean-up
        if: ${{ always() }}
        run: |
          sudo rm -rf build*
          sudo apt-get purge -y \
            ${{ steps.download-artifacts.outputs.installed }} || echo
        shell: bash

  linter-cpp-linter:
    name: Lint C/C++ (cpp-linter)
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.arch) }}
    strategy:
      matrix:
        arch: ["${{ fromJSON(inputs.runner-archs) }}"]
        build-type: [release]
      fail-fast: false
    permissions:
      pull-requests: write
      contents: read
    env:
      ARCH: ${{ fromJson(inputs.runner-arch-map)[0][matrix.arch] }}
      DOWNLOAD_PATH: ${{github.workspace}}/artifacts/downloads/${{fromJson(inputs.runner-arch-map)[0][matrix.arch]}}/${{matrix.build-type}}
      CC: gcc-12
      CXX: g++-12
    steps:
      - name: Checkout .github directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          repository: ${{ inputs.actions-repo }}
          ref: ${{ env.ACTIONS_REV }}

      - name: Initialize workspace
        id: initialize-workspace
        uses: ./.github/actions/initialize-workspace
        with:
          fetch-depth: 0
          remote-actions-repo: ${{ inputs.actions-repo }}
          token: ${{ secrets.GIT_CLONE_PAT || github.token }}

      - name: Download artifacts from s3
        id: download-artifacts
        if: >-
          ${{ inputs.actions-repo != github.repository &&
          inputs.skip-download == false }}
        uses: ./.github/actions/download-from-s3
        with:
          branch: ${{ steps.initialize-workspace.outputs.remote-branch }}
          build-type: ${{ matrix.build-type }}
          arch: ${{ env.ARCH }}
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          local-path: ${{ env.DOWNLOAD_PATH }}
          install: 'true'

      - name: Prepare project
        uses: ./.github/actions/build
        with:
          build-path: build_${{ matrix.build-type }}
          build-type: ${{ matrix.build-type }}
          build: ${{ inputs.build }}
          options: ${{ inputs.options }}

      - name: Run cpp-linter
        uses: cpp-linter/cpp-linter-action@v2
        id: cpp_linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: 'file'  # Use .clang-format config file
          tidy-checks: '' # Use .clang-tidy config file
          ignore: 'build*'
          database: build_${{ matrix.build-type }}
          thread-comments: ${{ github.event_name == 'pull_request' && 'true' }}
          format-review: ${{ github.event_name == 'pull_request' && 'true' }}
          version: 18

      - name: Clean-up
        if: ${{ always() }}
        run: |
          sudo rm -rf build*
          sudo apt-get purge -y \
            ${{ steps.download-artifacts.outputs.installed }} || echo
        shell: bash

      - name: Fail on error
        if: steps.cpp_linter.outputs.clang-format-checks-failed > 0
        run: exit 1

  linter-super-linter:
    name: Lint Python/Shell/Dockerfiles/GHActions/Markdown/YAML/JS
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.arch) }}
    strategy:
      matrix:
        arch: ["${{ fromJSON(inputs.runner-archs) }}"]
      fail-fast: false
    permissions:
      contents: read
      packages: read
      statuses: write
    steps:
      - name: Checkout .github directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          repository: ${{ inputs.actions-repo }}
          ref: ${{ env.ACTIONS_REV }}

      - name: Initialize workspace
        uses: ./.github/actions/initialize-workspace
        with:
          fetch-depth: 0
          remote-actions-repo: ${{ inputs.actions-repo }}
          token: ${{ secrets.GIT_CLONE_PAT || github.token }}

      - name: Run super-linter
        uses: super-linter/super-linter@v7
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_GITHUB_ACTIONS_STEP_SUMMARY: false
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_PYTHON_RUFF: true
          VALIDATE_BASH: true
          VALIDATE_SHELL_SHFMT: true
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_MARKDOWN: true
          VALIDATE_YAML: true
          VALIDATE_JAVASCRIPT_ES: true
