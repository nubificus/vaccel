name: Verify Build

on:
  workflow_call:
    inputs:
      actions-repo:
        type: string
        default: 'nubificus/vaccel'
      actions-rev:
        type: string
        default: 'main'
      runner:
        type: string
        default: '["gcc", "dind", "2204"]'
      runner-archs:
        type: string
        default: '["amd64", "arm64", "arm"]'
      runner-arch-map:
        type: string
        default: '[{"amd64":"x86_64", "arm64":"aarch64", "arm":"armv7l"}]'
      package:
        type: string
        default: 'vaccel'
      options:
        type: string
        default: 'auto_features=enabled'
      dist-options:
        type: string
        default: ''
      subprojects:
        type: boolean
        default: true
      skip-examples:
        type: boolean
        default: false
      valgrind:
        type: boolean
        default: true
      upload-subpath:
        type: string
        default: ''
      release:
        type: boolean
        default: false
    secrets:
      GIT_CLONE_PAT:
        required: false
      AWS_ACCESS_KEY:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

env:
  ACTIONS_REV: ${{ (github.repository != inputs.actions-repo) && inputs.actions-rev || '' }}
  DEFAULT_UPPATH: ${{ (inputs.package != 'vaccel') && format('{0}/{1}', 'plugins', inputs.package) || '' }}

jobs:
  verify-build:
    name: Verify Build
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.arch) }}
    strategy:
      matrix:
        arch: ["${{ fromJSON(inputs.runner-archs) }}"]
        build-type: [debug, release]
      fail-fast: false
    env:
      ARCH: ${{ fromJson(inputs.runner-arch-map)[0][matrix.arch] }}
      DOWNLOAD_PATH: ${{github.workspace}}/artifacts/downloads/${{fromJson(inputs.runner-arch-map)[0][matrix.arch]}}/${{matrix.build-type}}
      INSTALL_PREFIX: ${{github.workspace}}/artifacts/${{fromJson(inputs.runner-arch-map)[0][matrix.arch]}}/${{matrix.build-type}}
      CC: gcc-12
      CXX: g++-12
    steps:
      - name: Checkout .github directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          repository: ${{ inputs.actions-repo }}
          ref: ${{ env.ACTIONS_REV }}

      - name: Get revision info
        id: get-rev-info
        uses: ./.github/actions/get-revision-info

      # use the actual branch rev so uploaded artifacts are versioned correctly
      - name: Initialize workspace
        id: initialize-workspace
        uses: ./.github/actions/initialize-workspace
        with:
          fetch-depth: 0
          remote-actions-repo: ${{ inputs.actions-repo }}
          token: ${{ secrets.GIT_CLONE_PAT || github.token }}
          ref: ${{ steps.get-rev-info.outputs.sha }}

      - name: Download artifacts from s3
        id: download-artifacts
        if: ${{ inputs.actions-repo != github.repository }}
        uses: ./.github/actions/download-from-s3
        with:
          branch: ${{ steps.initialize-workspace.outputs.remote-branch }}
          build-type: ${{ matrix.build-type }}
          arch: ${{ env.ARCH }}
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          local-path: ${{ env.DOWNLOAD_PATH }}
          install: 'true'

      - name: Build project
        if: ${{ inputs.release == false }}
        uses: ./.github/actions/build
        with:
          prefix: ${{ env.INSTALL_PREFIX }}
          build-path: build_${{ matrix.build-type }}
          build-type: ${{ matrix.build-type }}
          options: ${{ inputs.options }}
          install: 'true'
          subprojects: ${{ inputs.subprojects }}

      - name: Run examples
        if: ${{ inputs.skip-examples == false && inputs.release == false }}
        uses: ./.github/actions/run-examples
        with:
          prefix: ${{ env.INSTALL_PREFIX }}
          package: ${{ inputs.package }}

      - name: Run examples with valgrind
        if: ${{ inputs.skip-examples == false && inputs.release == false && inputs.valgrind == true }}
        uses: ./.github/actions/run-examples
        with:
          prefix: ${{ env.INSTALL_PREFIX }}
          valgrind: 'true'
          package: ${{ inputs.package }}

      - name: Build project (dist)
        id: build-dist
        if: ${{ contains(github.event.pull_request.labels.*.name, 'ok-to-upload') || inputs.release == true }}
        uses: ./.github/actions/build
        with:
          prefix: ${{ env.INSTALL_PREFIX }}
          build-path: build_${{ matrix.build-type }}
          build-type: ${{ matrix.build-type }}
          options: ${{ inputs.dist-options || inputs.options }}
          dist: 'true'
          subprojects: ${{ inputs.subprojects }}

      - name: Upload to s3
        if: ${{ contains(github.event.pull_request.labels.*.name, 'ok-to-upload') || inputs.release == true }}
        uses: ./.github/actions/upload-to-s3
        with:
          arch: ${{ env.ARCH }}
          build-type: ${{ matrix.build-type }}
          local-path: ${{ steps.build-dist.outputs.dist-path }}/*
          remote-subpath: ${{ (inputs.upload-subpath != '' && inputs.upload-subpath) || env.DEFAULT_UPPATH }}
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Clean-up
        if: ${{ always() }}
        run: |
          sudo rm -rf artifacts build*
          sudo apt-get purge -y \
            ${{ steps.download-artifacts.outputs.installed }} || echo
        shell: bash
